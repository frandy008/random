{
  "nodes": [
    {
      "parameters": {},
      "id": "1",
      "name": "On form submission",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "mode": "manual",
        "fields": []
      },
      "id": "2",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": []
      },
      "id": "3",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "extractFromXLS",
        "file": "={{$json[\"file\"]}}"
      },
      "id": "4",
      "name": "Extract from File",
      "type": "n8n-nodes-base.file-read",
      "typeVersion": 1,
      "position": [850, 200]
    },
    {
      "parameters": {
        "operation": "extractFromXLSX",
        "file": "={{$json[\"file\"]}}"
      },
      "id": "5",
      "name": "Extract from File1",
      "type": "n8n-nodes-base.file-read",
      "typeVersion": 1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "sheetId": "your_sheet_id",
        "range": "A1:Z1000"
      },
      "id": "6",
      "name": "Master Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [850, 600]
    },
    {
      "parameters": {
        "functionCode": "// Nama yang ingin dicari (dari data yang ingin diperbarui)\nconst targetName = $json[\"Nama\"];\n\n// Data dari Master Data (Google Sheets atau sumber lain)\nlet masterData = $node['Master Data'].json;  // Mengambil data dari Master Data node\n\n// Debugging: Memeriksa apakah masterData adalah array\nconsole.log(Array.isArray(masterData));  // Memeriksa apakah masterData adalah array\nconsole.log(masterData); // Melihat isi dari masterData\n\n// Jika masterData bukan array, coba ambil array dari properti yang ada\nif (!Array.isArray(masterData)) {\n  // Misalnya, jika masterData adalah objek dengan properti 'items' yang berisi array\n  masterData = masterData.items || [];  // Sesuaikan nama properti sesuai dengan data yang diterima\n}\n\n// Ambil data dari node Extract (baik XLS atau XLSX), tergantung file yang diunggah\nlet extractedData = [];\n\n// Periksa apakah Extract from File (XLS) memiliki data\nif ($node['Extract from File'] && Array.isArray($node['Extract from File'].json)) {\n  extractedData = $node['Extract from File'].json;  // Data dari file XLS\n}\n// Periksa apakah Extract from File1 (XLSX) memiliki data\nelse if ($node['Extract from File1'] && Array.isArray($node['Extract from File1'].json)) {\n  extractedData = $node['Extract from File1'].json;  // Data dari file XLSX\n}\n\n// Gabungkan data Master Data dan data dari file XLS/XLSX\nconst combinedData = [...masterData, ...extractedData];  // Gabungkan kedua array\n\n// Pastikan combinedData berupa array dan tidak kosong\nif (!Array.isArray(combinedData) || combinedData.length === 0) {\n  throw new Error(\"combinedData tidak valid atau kosong\");\n}\n\n// Fungsi Levenshtein Distance\nfunction levenshtein(a, b) {\n  const matrix = [];\n\n  if (!a.length) return b.length;\n  if (!b.length) return a.length;\n\n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n\n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1).toLowerCase() === a.charAt(j - 1).toLowerCase()) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1,\n          Math.min(\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          )\n        );\n      }\n    }\n  }\n\n  return matrix[b.length][a.length];\n}\n\n// Cari data yang paling mirip\nlet closestMatch = null;\nlet minDistance = Infinity;\n\nfor (const data of combinedData) {\n  // Pastikan data memiliki properti 'Nama'\n  if (!data.hasOwnProperty(\"Nama\")) {\n    console.log(\"Data tanpa Nama:\", data);\n  } else {\n    const distance = levenshtein(targetName, data.Nama);\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestMatch = data;\n    }\n  }\n}\n\n// Tetapkan NIK yang ditemukan (jika ada)\nreturn [\n  {\n    json: {\n      nama: targetName,\n      nik: closestMatch ? closestMatch.NIK : null,\n      match_nama: closestMatch ? closestMatch.Nama : null,\n      distance: minDistance,\n    },\n  },\n];"
      },
      "id": "7",
      "name": "Code",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 400]
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Master Data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
}
